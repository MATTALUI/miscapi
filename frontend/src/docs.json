{
  "name": "MISCAPI",
  "intro": "Welcome to MISCAPI",
  "main": {
    "name": "Overview",
    "intro": "MISCAPI is a multi-namespaces API containing a framework for building smaller sub-APIs.\nThe idea is that instead of starting a new API project from scratch every time an app idea is born, a large, overarching API can be built that will house endpoints for a project. That means that project APIs can be built faster since there's already an existing method for basic things like user registration and authentication, model-based querying ORMs, and routing. Spinning up new projects can be faster than ever before!\nSince MISCAPI is built on top of technologies like Sails.js and Express.js, there is a good balance of opinionated design as well as flexibility. For example, there are existing subapps within MISCAPI that use both REST as well as GraphQL for querying!",
    "nodes": [
      {
        "note": "This documentation is a part of the project as well. We're working towards building a documentation generator that will update the \"state\" of this documentation every time changes are made. As we're still working towards that you may notice that there are some rough edges and incompletions here and there. Got feedback? Let us know and we'll try and take care of it!"
      }
    ]
  },
  "general": {
    "making-requests": {
      "name": "Making Requests",
      "key": "making-requests",
      "nodes": [
        {
          "text": "There are two keys that are absolutely critical in sending requests to most MISCAPI applications. The first is an application identifier and the second is some sort of user authentication."
        },
        {
          "note": "It should be assumed that all endpoints referenced within MISCAPI required both of these pieces of data to authenticate unless it is explicitly stated otherwise."
        },
        {
          "type": "section",
          "header": "Application Authorization",
          "text": "The application identifier is a unique, secret string that is issued to any registered clients. It is subapplication specific, so multiple secrets will be needed for any cross-namespace applications. It is supplied to the application using the Authorization header with a Basic: value."
        },
        {
          "pre": "Authorization Basic: $APPLICATION_AUTHORIZATION_KEY",
          "language": "shell"
        },
        {
          "type": "section",
          "header": "User Authentication",
          "text": "Most subapplications require an authenticated user in order to provide access. A user is required unless otherwise stated. This user can be provided in one of two ways.\nThe first is using a browser-based cookie system. When successful POST requests are made to the user session endpoing, the user token is set as a cookie. This is all that is needed for most web-based clients.\nThe second is by providing a user token via the X-Identity header. This is a less preferred method and will be evaluated only if the access cookie does not exist. The user token is returned as part of the authentication process. These tokens are used to identify users and access information, so they should be closely guarded."
        },
        {
          "pre": "X-Identity $AUTHORIZED_USER_TOKEN",
          "language": "shell"
        },
        {
          "type": "section",
          "header": "Request Example"
        },
        {
          "pre": "curl \\\n\t-H \"Authorization: Basic: $AUTOLOGS_AUTHORIZATION_KEY\" \\\n\t-H \"X-Identity: $AUTHORIZED_USER_TOKEN\" \\\n\thttp://miscapi.herokuapp.com/auto-logs/logs",
          "language": "shell"
        }
      ]
    },
    "global-entities": {
      "name": "Global Entities",
      "key": "global-entites",
      "nodes": [],
      "entities": [{
        "name": "User",
        "explanation": "User objects exist within the global MISCAPI domain. They are critical in the process of getting authenticated.",
        "note": "Since it is is a critical preauthorization step to have a user, User endpoints do not require typical authorization steps.",
        "attributes": {
          "id": {
            "type": "PK",
            "required": true,
            "description": "Integer primary key for the User"
          },
          "email": {
            "type": "string",
            "required": true,
            "description": "A unique email address for a user."
          },
          "firstName": {
            "type": "string",
            "required": true,
            "description": "User's first name."
          },
          "lastName": {
            "type": "string",
            "required": true,
            "description": "User's last name"
          },
          "nickName": {
            "type": "string",
            "required": false,
            "description": "Optional field for Client convenience used for an easy reference to a user."
          },
          "description": {
            "type": "string",
            "required": false,
            "description": "Optional field for Client convenience used to describe a user."
          },
          "vehicles": {
            "type": "[Vehicle]",
            "required": true,
            "description": "A User has many Vehicles. Vehicles are entities within the Autologs namespace. If a user has no Vehicle objects associated with it, this will be represented as an empty array."
          },
          "logs": {
            "type": "[Log]",
            "required": true,
            "description": "A User has many Logs. Logs are entities within the Autologs namespace. If a user has no Log objects associated with it, this will be represented as an empty array."
          },
          "cards": {
            "type": "[Card]",
            "required": true,
            "description": "A User has many cards. Cards are entities within the Fastlang namespace. If a user has no Cards associated with it, this will be represented with an empty array."
          },
          "createdAt": {
            "type": "number",
            "required": true,
            "description": "Metafield indicating the date the record was initially created."
          },
          "updatedAt": {
            "type": "number",
            "required": true,
            "description": "Metafield indicating the date the record was last updated."
          }
        }
      }],
      "endpoints": [
        {
          "method": "GET",
          "endpoint": "/global/user",
          "description": "Returns the currently logged in user. Empty object if not logged in.",
          "exampleResponse": {
            "id": 1,
            "createdAt": 1568061175093,
            "updatedAt": 1588962034630,
            "email": "matt@example.com",
            "firstName": "Matthew",
            "lastName": "Hummer",
            "nickname": "MATTALUI",
            "description": "I am Matt."
          }
        },
        {
          "method": "POST",
          "endpoint": "/global/users",
          "description": "Registers a new user to MISCAPI. In addition to the base User attributes, this endpoint also requires a password and confirmPassword data in order to enable a password for the user. These two much match in order to register the user. Since it also logs the user in, the return value includes the newly created User as well as the authenticated user token.",
          "exampleResponse": {
            "user": {
              "id": 2,
              "createdAt": 1588970425600,
              "updatedAt": 1588970425600,
              "email": "matt2@example.com",
              "firstName": "Matt",
              "lastName": "Bummer",
              "nickname": "NEW MATTALUI",
              "description": "I am Matt."
            },
            "userToken": "SUPERSECRETTOKENWOWZA"
          }
        },
        {
          "method": "POST",
          "endpoint": "/global/user/session",
          "description": "Logs a user in based on the provided email and password data that is submitted. Returns an object containing the User data, as well as an authenticated user token for the use of non-cookie based clients.",
          "exampleResponse": {
            "user": {
              "id": 1,
              "createdAt": 1568061175093,
              "updatedAt": 1588962034630,
              "email": "matt@example.com",
              "firstName": "Matthew",
              "lastName": "Hummer",
              "nickname": "MATTALUI",
              "description": "I am Matt."
            },
            "userToken": "SUPERSECRETTOKENWOWZA"
          }
        },
        {
          "method": "DELETE",
          "endpoint": "/global/user/session",
          "description": "Logs a user out of the application by removing any cookie-based application data. Returns boolean indicating whether or not logout was successful.",
          "exampleResponse": true
        }
      ]
    }
  },
  "apps": {
    "auto-logs": {
      "name": "AutoLogs",
      "key": "auto-logs",
      "urlPrefix": "apps/",
      "urlSuffix": "docs/",
      "intro": "The Autologs API allows clients to create, read, update, and delete records for logging mileage, fuel consuption, and fillup locations. In addition, clients can manage reference data relative to the project scope. The API is accessible via the auto-log app namespace endpoint of MISCAPI.",
      "nodes": [],
      "entities": [{
          "name": "User",
          "explanation": "User objects exist within the global MISCAPI domain, and so are not directly accessible via the auto-log application namespace. However, these are the relevant relationships that exist within the auto-log scope.",
          "note": "For more on managing User objects, see the <a href='/global-entites/#entity-User'>global MISCAPI documentation</a>.",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the User"
            },
            "vehicles": {
              "type": "[Vehicle]",
              "required": true,
              "description": "A User has many Vehicles. If a user has no Vehicle objects associated with it, this will be represented as an empty array."
            },
            "logs": {
              "type": "[Log]",
              "required": true,
              "description": "A User has many Logs. If a user has no Log objects associated with it, this will be represented as an empty array."
            }
          }
        },
        {
          "name": "Vehicle",
          "explanation": "A Vehicle is reference data for the vehicle that a Log is applied to. Only make and model of a vehicle are required for, but many fields exist for client convenience. The owner will be supplied by the application logic.",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the Vehicle"
            },
            "make": {
              "type": "string",
              "required": true,
              "description": "The make of the Vehicle"
            },
            "model": {
              "type": "string",
              "required": true,
              "description": "The model of the Vehicle"
            },
            "year": {
              "type": "string",
              "required": false,
              "description": "The manufacturing year of the Vehicle"
            },
            "nickname": {
              "type": "string",
              "required": false,
              "description": "An optional nickname that can be used in displaying the Vehicle in the client."
            },
            "description": {
              "type": "string",
              "required": false,
              "description": "A brief description of the Vehicle"
            },
            "owner": {
              "type": "FK",
              "required": true,
              "description": "Integer ID representing the User model of the Vehicle owner. This field is not required for entity creation, as it will be supplied by application logic to be the ID of the current User."
            },
            "createdAt": {
              "type": "number",
              "required": true,
              "description": "Metafield indicating the date the record was initially created."
            },
            "updatedAt": {
              "type": "number",
              "required": true,
              "description": "Metafield indicating the date the record was last updated."
            }
          }
        },
        {
          "name": "Log",
          "explanation": "A Log is the most critical object within the auto-log application namespace, as it is the main intention of the API. They are intentionally made very flexible so that a client may use it as it sees fit. The only required pieces of information that are required are user (which will be supplied by the application logic), and the vehicle, which is the PK ID of the Vehicle that the Log belongs to.",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the Log"
            },
            "miles": {
              "type": "number",
              "required": false,
              "description": "The count of miles to be saved to the log. This can either be trip miles or odometer miles, depending on how the client submits it."
            },
            "fillupAmount": {
              "type": "number",
              "required": false,
              "description": "The amount of gasoline put into the Vehicle. Units purposefully left vague so that they can be standardized by the client."
            },
            "fillupCost": {
              "type": "number",
              "required": false,
              "description": "The cost of the fuel that was purchased during a fillup. Currency can be standardized by the client."
            },
            "note": {
              "type": "string",
              "required": false,
              "description": "Convenience field for client user to submit any notes regarding the log."
            },
            "location": {
              "type": "string",
              "required": false,
              "description": "A string name representing the location the log was created/is referring to."
            },
            "coords": {
              "type": "string",
              "required": false,
              "description": "GPS coordinates of the location. Can be used for mapping capabilites (external API required)"
            },
            "user": {
              "type": "FK",
              "required": true,
              "description": "Integer ID representing the User model that created the Log. This field is not required for entity creation, as it will be supplied by application logic to be the ID of the current User."
            },
            "vehicle": {
              "type": "FK",
              "required": true,
              "description": "Integer ID representing the Vehicle model the Log is tied to."
            },
            "createdAt": {
              "type": "number",
              "required": true,
              "description": "Metafield indicating the date the record was initially created."
            },
            "updatedAt": {
              "type": "number",
              "required": true,
              "description": "Metafield indicating the date the record was last updated."
            }
          }
        }
      ],
      "endpoints": [{
          "method": "GET",
          "endpoint": "/auto-logs/logs",
          "description": "Retrieves a comprehensive list of all logs for all vehicles that belong to the requesting user. Returns array of Logs.",
          "exampleResponse": [{
              "id": 1,
              "createdAt": 1568061175193,
              "updatedAt": 1568061175193,
              "miles": "411.22",
              "fillupAmount": "9.94",
              "fillupCost": "44.14",
              "note": "",
              "location": "gas station at fort collins",
              "coords": "40.5853° N, 105.0844° W",
              "user": 1,
              "vehicle": 1
            },
            {
              "id": 2,
              "createdAt": 1568061175193,
              "updatedAt": 1568061175193,
              "miles": "2587.4",
              "fillupAmount": "8.47",
              "fillupCost": "31.06",
              "note": "",
              "location": "gas station at fort collins",
              "coords": "40.5853° N, 105.0844° W",
              "user": 1,
              "vehicle": 2
            }
          ]
        },
        {
          "method": "GET",
          "endpoint": "/auto-logs/logs/:logId",
          "description": "Retrieves details relative to a specific Log entity that a user has access to. Returns single Log object representing the entity that was requested.",
          "exampleResponse": {
            "id": 3,
            "createdAt": 1568061175193,
            "updatedAt": 1568061175193,
            "miles": "3491.11",
            "fillupAmount": "17.47",
            "fillupCost": "15.97",
            "note": "",
            "location": "gas station at fort collins",
            "coords": "40.5853° N, 105.0844° W",
            "user": 1,
            "vehicle": 3
          }
        },
        {
          "method": "POST",
          "endpoint": "/auto-logs/logs",
          "description": "Creates a Log for the user. Returns single Log representing the created entity.",
          "exampleResponse": {
            "id": 12,
            "createdAt": 1568061175193,
            "updatedAt": 1568061175193,
            "miles": "3491.11",
            "fillupAmount": "17.47",
            "fillupCost": "15.97",
            "note": "",
            "location": "gas station at fort collins",
            "coords": null,
            "user": 1,
            "vehicle": 3
          }
        },
        {
          "method": "PUT",
          "endpoint": "/auto-logs/logs/:logId",
          "description": "Updates Log entity by ID. Returns single Log representing the entity that was updated.",
          "exampleResponse": {
            "id": 12,
            "createdAt": 1568061175193,
            "updatedAt": 1588903053350,
            "miles": "3491.11",
            "fillupAmount": "10.42",
            "fillupCost": "489.69",
            "note": "",
            "location": "Gas station at fort collins",
            "coords": null,
            "user": 1,
            "vehicle": 3
          }
        },
        {
          "method": "PATCH",
          "endpoint": "/auto-logs/logs/:logId",
          "description": "Updates Log entity by ID. Returns single Log representing the entity that was updated.",
          "exampleResponse": {
            "id": 12,
            "createdAt": 1568061175193,
            "updatedAt": 1588903053350,
            "miles": "3491.11",
            "fillupAmount": "10.42",
            "fillupCost": "489.69",
            "note": "",
            "location": "Gas station at fort collins",
            "coords": null,
            "user": 1,
            "vehicle": 3
          }
        },
        {
          "method": "DELETE",
          "endpoint": "/auto-logs/logs/:logId",
          "description": "Deletes Log entity by ID. Returns single Log representing the entity that was deleted.",
          "exampleResponse": {
            "id": 12,
            "createdAt": 1568061175193,
            "updatedAt": 1588903053350,
            "miles": "3491.11",
            "fillupAmount": "10.42",
            "fillupCost": "489.69",
            "note": "",
            "location": "Gas station at fort collins",
            "coords": null,
            "user": 1,
            "vehicle": 3
          }
        },
        {
          "method": "GET",
          "endpoint": "/auto-logs/vehicles",
          "description": "Retrieves a comprehensive list of all vehicles that belong to the requesting user. Returns array of Vehicles.",
          "exampleResponse": [{
              "id": 1,
              "createdAt": 1568061175149,
              "updatedAt": 1568061175149,
              "make": "Subaru",
              "model": "Outback Impreza",
              "year": "2006",
              "nickname": "Matt's Car",
              "description": "",
              "owner": 1
            },
            {
              "id": 2,
              "createdAt": 1568061175149,
              "updatedAt": 1568061175149,
              "make": "Subaru",
              "model": "Crosstrek",
              "year": "",
              "nickname": "Annie's Car",
              "description": "Big and blue",
              "owner": 1
            }
          ]
        },
        {
          "method": "GET",
          "endpoint": "/auto-logs/vehicles/:vehicleId",
          "description": "Retrieves details relative to a specific Vehicle entity that a user has access to. Returns single Vehicle object representing the entity that was requested.",
          "exampleResponse": {
            "id": 3,
            "createdAt": 1568061175149,
            "updatedAt": 1568061175149,
            "make": "Harley-Davidson",
            "model": "Street",
            "year": "2015",
            "nickname": "Matt's Bike",
            "description": "It's super fly",
            "owner": 1
          }
        },
        {
          "method": "GET",
          "endpoint": "/auto-logs/vehicles/:vehicleId/logs",
          "description": "Retrieves a list of Logstied to a specific Vehicle entity that a user has access to. Returns array of Log objects tied to the Vehicle entity that was requested.",
          "exampleResponse": [{
              "id": 1,
              "createdAt": 1568061175193,
              "updatedAt": 1568061175193,
              "miles": "411.22",
              "fillupAmount": "9.94",
              "fillupCost": "44.14",
              "note": "",
              "location": "gas station at fort collins",
              "coords": "40.5853° N, 105.0844° W",
              "user": 1,
              "vehicle": 1
            },
            {
              "id": 4,
              "createdAt": 1568069057199,
              "updatedAt": 1568069057199,
              "miles": "80081",
              "fillupAmount": "14.56",
              "fillupCost": "45.89",
              "note": "This is the first log I am going to create",
              "location": "Shell on laurel",
              "coords": "N X W Y",
              "user": 1,
              "vehicle": 1
            }
          ]
        },
        {
          "method": "POST",
          "endpoint": "/auto-logs/vehicles",
          "description": "Creates a Vehicle for the user. Returns single Vehicle representing the created entity.",
          "exampleResponse": {
            "id": 70,
            "createdAt": 1568061175149,
            "updatedAt": 1568061175149,
            "make": "Nissan",
            "model": "Sentra",
            "year": "",
            "nickname": "",
            "description": "",
            "owner": 1
          }
        },
        {
          "method": "PUT",
          "endpoint": "/auto-logs/vehicles/:vehicleId",
          "description": "Updates Vehicle entity by ID. Returns single Vehicle representing the entity that was updated.",
          "exampleResponse": {
            "id": 70,
            "createdAt": 1568061175149,
            "updatedAt": 1588903457804,
            "make": "Nissan",
            "model": "Sentra",
            "year": "2009",
            "nickname": "",
            "description": "Little black with sick rimss",
            "owner": 1
          }
        },
        {
          "method": "PATCH",
          "endpoint": "/auto-logs/vehicles/:vehicleId",
          "description": "Updates Vehicle entity by ID. Returns single Vehicle representing the entity that was updated.",
          "exampleResponse": {
            "id": 70,
            "createdAt": 1568061175149,
            "updatedAt": 1588903457804,
            "make": "Nissan",
            "model": "Sentra",
            "year": "2009",
            "nickname": "",
            "description": "Little black with sick rimss",
            "owner": 1
          }
        },
        {
          "method": "DELETE",
          "endpoint": "/auto-logs/vehicles/:vehicleId",
          "description": "Deletes Vehicle entity by ID. Returns single Vehicle representing the entity that was deleted.",
          "exampleResponse": {
            "id": 70,
            "createdAt": 1568061175149,
            "updatedAt": 1588903457804,
            "make": "Nissan",
            "model": "Sentra",
            "year": "2009",
            "nickname": "",
            "description": "Little black with sick rimss",
            "owner": 1
          }
        }
      ]
    },
    "fastlang": {
      "name": "FastLang",
      "key": "fastlang",
      "urlPrefix": "apps/",
      "urlSuffix": "docs/",
      "intro": "Fastlang is an API that allows clients to create language-learning applications by defining things like languages and flash cards. Wanna learn a language quickly? Then you're gonna wanna live your life in the Fastlang!",
      "nodes": [],
      "entities": [
        {
          "name": "User",
          "explanation": "User objects exist within the global MISCAPI domain, and so are not directly accessible via the fastlang application namespace. However, these are the relevant relationships that exist within the fastlang scope.",
          "note": "For more on managing User objects, see the <a href='/global-entites/#entity-User'>global MISCAPI documentation</a>.",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the User"
            },
            "cards": {
              "type": "[Card]",
              "required": true,
              "description": "A User has many Cards. If a user has no Card objects associated with it, this will be represented as an empty array."
            }
          }
        },
        {
          "name": "Language",
          "explanation": "A Language is the most fundamental piece of any language learning application. All Cards and CardWords rely on having a Language available in order to learn.",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the Language"
            },
            "name": {
              "type": "string",
              "required": true,
              "description": "The name of the language."
            },
            "shortCode": {
              "type": "string",
              "required": true,
              "description": "A short code that represents the language. Ex: SPA (Spanish)"
            },
            "color": {
              "type": "string",
              "required": false,
              "description": "A color that can be used to represent a language when displaying words on a flashcard. This field is purposefully very liberal so that clients can consume as needed."
            },
            "description": {
              "type": "PK",
              "required": false,
              "description": "A short description of the Language."
            },
            "words": {
              "type": "[CardWord]",
              "required": true,
              "description": "A list of words that belong to a language. These words are based off of the CardWords that are added to cards."
            }
          }
        },
        {
          "name": "Card",
          "explanation": "A Card conatins the definition for a flashcard that the user creates. This definition will probably be in the native labnguage of the user. A Card can have many CardWords which are the Language-specific translations of the definition on the card.",
          "note": "",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the Card"
            },
            "definition": {
              "type": "string",
              "required": true,
              "description": "This key represents the user's definition for a translation in their own words."
            },
            "currentSet": {
              "type": "boolean",
              "required": true,
              "description": "A boolean calue used to represent whether a  word is in a User's \"current set\". This means that clients can toggle whether or not a word will be fetched with general requests and therefore filter out things like \"old\" or \"passed\" words. Defaults to True."
            },
            "user": {
              "type": "FK",
              "required": true,
              "description": "Integer ID representing the User that the Card belongs to. This value will be set by the API based on the current logged in User."
            },
            "words": {
              "type": "[CardWord]",
              "required": true,
              "description": "All of the Language-specific translations given by a user for a card. If a Card has no CardWord objects associated with it, this will be represented as an empty array."
            }
          }
        },
        {
          "name": "CardWord",
          "explanation": "",
          "note": "",
          "attributes": {
            "id": {
              "type": "PK",
              "required": true,
              "description": "Integer primary key for the CardWord"
            },
            "value": {
              "type": "string",
              "required": true,
              "description": "The Language translation value for the definition of the Card the CardWord belongs to."
            },
            "language": {
              "type": "FK",
              "required": true,
              "description": "Integer ID representing the Language the CardWord value is translated for."
            },
            "card": {
              "type": "FK",
              "required": true,
              "description": "Integer ID representing the Card the CardWord belongs to."
            }
          }
        }
      ],
      "endpoints": []
    }
  },
  "followup": {
    "developing": {
      "name": "Developing",
      "title": "How to Contribute",
      "key": "developing",
      "nodes": [
        {
          "text": "Better contribution guidelines are in the works. For now, if you would like to contribute, open a PR to the repo and your changes will be reviewed."
        },
        {
          "link": "https://github.com/MATTALUI/miscapi"
        }
      ]
    }
  }
}
